m<-matrix()
rm(m)
?return
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
#If m is not empty, give the message "getting cached data" and show 'm'
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
x<-c((5,3),(7,4))
x<-(c(5,3),c(7,4))
x<-matrix(c(5,3),c(7,4))
x
rm(x)
x<-matrix(c(2,4,5,3,2,7),nrow=3,ncol=3)
x
makeCacheMatrix
cacheSolve
makeCacheMatrix(x)
cacheSolve
cacheSolve()
cacheSolve(x)
x[getinverse]
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x=matrix(), ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
#If m is not empty, give the message "getting cached data" and show 'm'
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
x<-matrix(c(2,4,5,3,2,7),nrow=3,ncol=3)
makeCacheMatrix(x)
cacheSolve
cacheSolve()
cacheSolve(x)
x<-matrix(c(2,4,5,3,2,7),nrow=3,ncol=3)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x=matrix(), ...) {
m <- x["getinverse"]() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) {
message("getting cached data") #If m is not empty, give the message "getting cached data" and show 'm'
return(m)
}
data <- x["get"]() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x["setinverse"](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
x<-matrix(c(2,4,5,3,2,7),nrow=3,ncol=3)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve()
x$getinverse()
x[getinverse]()
x
x$set
x[set]
solve(x)
x<-matrix(c(2,4,5,3),nrow=2,ncol=2)
solve(x)
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x=matrix(), ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
x<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat(x)
cacheSolve()
vec<-makeCacheMat(x)
vec
vec$getinverse
vec$getinverse()
mx<-solve(x)
vec$getinverse(mx)
vec$setinverse(mx)
vec$getinverse(mx)
vec$getinverse()
cacheSolve
cacheSolve()
cacheSolve(x)
cacheSolve(mx)
x<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
makeCacheMat(x)
cacheSolve()
cacheSolve(x)
x<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x['getinverse']() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x['get']() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x['setinverse'](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
makeCacheMat(x)
cacheSolve()
cacheSolve(x)
x<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x['setinverse'](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x['setinverse'](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
makeCacheMat(x)
cacheSolve()
cacheSolve(x)
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x['getinverse']() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x['setinverse'](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
MakeCacheMat(zeta)
makeCacheMat(zeta)
cacheSolve(zeta)
## This function creates a special matrix that can cache its inverse.
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x['get']() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x['setinverse'](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat(zeta)
cacheSolve()
cacheSolve(x)
cacheSolve(zeta)
Traceback
traceback
traceback(cacheSolve)
## The functions bellow create a special object that is able to store a given matrix and cache its inverse.
## This function creates a special matrix that can cache its inverse.
makeCacheMat <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x[['getinverse']]() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat(zeta)
cacheSolve(zeta)
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat <- function(x=matrix(), ...) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x$getinverse() # create m value that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
makeCacheMat(zeta)
cacheSolve
cacheSolve()
cacheSolve(zeta)
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat <- function(x=matrix(), ...) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x["getinverse"]() # create local object 'm' that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x$get() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x$setinverse(m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
cacheSolve(zeta)
makeCacheMat(zeta)
cacheSolve(zeta)
makeCacheMat <- function(x=matrix(), ...) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x["getinverse"]() # create local object 'm' that contains the inverse calculated with the previous function
if(!is.null(m)) { #If 'm' is not empty, give the message "getting cached data" and show 'm'
message("getting cached data")
return(m)
}
data <- x["get"]() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x["setinverse"](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
makeCacheMat(zeta)
cacheSolve(zeta)
zeta<-matrix(c(2,4,5,3),nrow=2,ncol=2)
## The functions bellow create a special object that is able to store a given matrix and cache its inverse.
## This function creates a special matrix that can cache its inverse.
makeCacheMat <- function(x=matrix(), ...) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve #create function to calculate the inverse
getinverse <- function() m #create function to store the inverse
list(set = set, get = get, #display the four created elements as a list
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the special matrix created with the function above
cacheSolve <- function(x, ...) {
m <- x["getinverse"]() # create local object 'm' that contains the inverse calculated with the previous function
#If 'm' is not empty, give the message "getting cached data" and show 'm'
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x["get"]() #create object data to store the matrix created in the function 'makeCacheMatrix'
m <- solve(data, ...) # store the inverse of the function cached in the previous line, as 'm'
x["setinverse"](m) #display the function setinverse coming from makeCacheMatrix
m #display the cached inverse of the original matrix
}
makeCacheMat(zeta)
cacheSolve(Zeta)
cacheSolve(zeta)
